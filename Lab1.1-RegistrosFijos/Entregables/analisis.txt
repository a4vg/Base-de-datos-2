P2. ¿Es relevante el manejo de archivos binarios para este caso? (int y float en clase Alumno)
Sí. Al principio los únicos datos a guardar eran de tipo char, por lo que los archivos de texto eran suficiente. Con las variables
de tipo numéricas ello cambia, pues para escribirlas deben transformarse a chars. Esto ocasiona un gasto de memoria innecesaria (para
ints con más de 4 dígitos y floats): cada digito ocupa un byte, en lugar de que todo el número ocupe solo 4 bytes, y en el caso de los
decimales el punto ocupa otro byte, como un caracter más.

P3. ¿Que alternativa de eliminación emplearía?
Para data de poco tamaño como la de este ejercicio: A primera vista, lo mejor sería borrar el registro 'i' y mover el último 
la posición de 'i', reemplazandolo. Sin embargo, en archivos de texto no es posible eliminar una linea en específico, se necesita crear
un archivo temporal y reescribir todo el archivo original con el cambio deseado. Por ello, lo mejor termina siendo correr todos los
registros a la posición del registro anterior.
Para data más extensa: Usar un free list es mucho más rápido que reescribir el archivo para cada eliminación. Tan solo se agrega el
registro a eliminar al header.

Archivos de texto vs archivos binarios
Los archivos binarios son una manera más eficiente de almacenar archivos en comparación a los de texto. Mientras que estos ultimos 
solo permiten guardar registros como caracteres ASCII, los binarios guardan bytes, permitiendo almacenar cualquier tipo de data
(desde ints hasta objetos). Leer archivos de texto se vuelve engorroso al tener que tomar en cuenta el salto de linea ('\n') y
otros caracteres no visibles, como el utilizado para el EOF.

